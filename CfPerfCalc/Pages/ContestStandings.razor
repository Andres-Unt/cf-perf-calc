@page "/contest-standings"
@using CfPerfCalc.Services
@inject CfPerfCalc.Services.CfApiClient CfApiClient

<h3>Contest Standings</h3>

<div>
    <label for="contestId">Enter Contest ID:</label>
    <input type="number" @bind="contestId" @bind:event="oninput" @onchange="LoadStandings"/>
</div>

@if (error != null)
{
    <p class="text-danger">@error</p>
}
else if (loadingStandings)
{
    @if (missingRatings > 0)
    {
        <p>Missing ratings for @missingRatings contestants...</p>
    }
    else
    {
        <p>Loading standings...</p>
    }
}
else if (!standingsLoaded)
{
    <p>Please enter a contest ID to view standings.</p>
}
else if (standingsLoaded)
{
    <table class="table">
        <thead>
        <tr>
            <th>Rank</th>
            <th>Type</th>
            <th>Handle</th>
            <th>Rating</th>
            <th>Points</th>
            <th>Penalty</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var entry in standings)
        {
            <tr>
                <td>@entry.rank</td>
                <td>@entry.type</td>
                <td>@entry.handle</td>
                <td>@(ratings.TryGetValue(entry.handle, out var rating) ? rating.ToString() : "?")</td>
                <td>@entry.points</td>
                <td>@entry.penalty</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private int? contestId;
    private List<Entry> standings;
    private string error;
    private Dictionary<string, int> ratings;
    private int missingRatings = 0;
    private bool loadingStandings = false;
    private bool standingsLoaded = false;

    private async Task LoadStandings()
    {
        try
        {
            standingsLoaded = false;
            loadingStandings = true;
            StateHasChanged();
            error = null; // Reset error
            standings = null;
            standings = await CfApiClient.GetContestStandingsAsync(contestId!.Value);
            ratings = await CfApiClient.GetRatedListAsync();
            missingRatings = 0;
            var mustFindRatingsFor = new HashSet<string>();
            foreach (var entry in standings)
            {
                if (!ratings.ContainsKey(entry.handle))
                {
                    ++missingRatings;
                    mustFindRatingsFor.Add(entry.handle);
                }
            }

            StateHasChanged();
            while (missingRatings > 0)
            {
                var shouldFind = mustFindRatingsFor.Take(500).ToList();
                await CfApiClient.EnsureRatings(shouldFind);
                ratings = await CfApiClient.GetRatedListAsync();
                foreach (var item in shouldFind)
                {
                    if (ratings.ContainsKey(item))
                    {
                        mustFindRatingsFor.Remove(item);
                        --missingRatings;
                    }
                }

                if (missingRatings > 0)
                {
                    await Task.Delay(2100); //api rate limit
                }
                StateHasChanged();
            }
            loadingStandings = false;
            standingsLoaded = true;
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
        }
    }
}